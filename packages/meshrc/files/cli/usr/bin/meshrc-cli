#!/bin/sh

. /usr/share/libubox/jshn.sh

CONFIG="config.tar.gz"
CONFIG_DIR="/var/lib/config/"

bmx7_add_sms_entry() {
    bmx7 -c syncSms="${1}"
}

bmx7_del_sms_entry() {
    uci delete bmx7.${1}
}

bmx7_add_sms_file() {
    filename = "basename($1)"
    bmx7_add_sms_entry "${filename}"
    ln -s "$1" "/var/run/bmx7/sms/sendSms/${filename}"
}

bmx7_del_sms_file() {
    filename = "basename($1)"
    #bmx7_del_sms_entry "${filename}"
    rm "/var/run/bmx7/sms/sendSms/${filename}"
}

update_initial_config() {
    tar c -z -C "$CONFIG_DIR" . -f "/www/config/${CONFIG}"
}

initial_config_distribution() {
    if [[ "$1" -eq 1 -o "$1" == "true" ]]; then 
        json_load "$(cat /var/run/bmx7/json/status)"
        json_select status
        json_get_var bmx7_nodeid nodeId
        # create required folders
        mkdir -p "${CONFIG_DIR}/etc/config/"
        mkdir -p "${CONFIG_DIR}/etc/uci-defaults/"
    #    ln -s /etc/config/lime-defaults /var/lib/config/etc/config/lime-defaults
        cat <<EOF > "${CONFIG_DIR}/etc/uci-defaults/50_initial_config"
#!/bin/sh

# activate the access point and mesh wifi
uci add_list lime.wifi.modes='ap'
uci add_list lime.wifi.modes='ieee80211s'

# take the same wifi settings as the current node
uci set lime.wifi.ieee80211s_mesh_id="$(uci -q get lime.wifi.ieee80211s_mesh_id)"
uci set lime.wifi.ieee80211s_key="$(uci -q get lime.wifi.ieee80211s_key)"
uci set lime.wifi.ap_key="$(uci -q get lime.wifi.ap_key)"

# automatically trust this node
uci set lime.meshrc="lime"
uci add_list lime.meshrc.trusted='$bmx7_nodeid'

# separate the wifi config and apply config
lime-smart-wifi
lime-config
lime-apply
EOF

        # create initial config archive
        mkdir -p "/www/config/"
        update_initial_config

        # activate the config distribution
        uci -q set lime.meshrc="lime"
        uci -q set lime.meshrc.initial=true
        uci -q set uhttpd.nodeconfig=uhttpd
        uci -q set uhttpd.nodeconfig.home='/www/config'
        uci -q set uhttpd.nodeconfig.listen_http='8123'
    else
        uci -q delete uhttpd.nodeconfig
        uci -q set lime.meshrc.initial=false
    fi
    uci commit lime
    uci commit uhttpd
    /etc/init.d/uhttpd reload
}

run_command() {
    echo "run command $1"
    if [[ "$node_id" == "" ]]; then
        echo "$2" > "/var/run/bmx7/sms/sendSms/${1}"
        bmx7_add_sms_entry "${1}"
    else
        echo "$2" > "/var/run/bmx7/sms/sendSms/${1}_${node_id}"
        bmx7_add_sms_entry "${1}_${node_id}"
    fi
}

usage() {
    cat << EOF
Usage: $0 

    -h --help                           : show this message
    -i --shortid <shortid>              : short id of node to be configured
    -l --list-nodes                     : show all nodes of mesh network
    -H --hostname <name>                : sets node name for given shortId
    -a --ap-key <passworkd>             : set access point password of all nodes
    -m --mesh-id <new_id>               : set mesh id of all nodes
    -m --mesh-key <passworkd>           : set mesh password of all nodes
    -f --firstboot                      : resets all nodes by removing overlayfs
    -r --raw <command>                  : runs given command directly on node
    -s --set-ssh <ssh_keys>             : set ssh key to all nodes

Examples:

    $0 -i ABCD1234 -a "individual-ap-password"
    $0 -i BCDE2345 -r "reboot"
    $0 -m "new-mesh-password"
EOF
}

node_id=""

while [ "$#" ]; do
    case $1 in
        -h|--help)
            usage
            shift
            ;;
        -l|--list-nodes)
            bmx7 -c originators | tail -n +3 | awk '{ print $1" "$2 }'
            shift
            ;;
        -i|--shortid)
            node_id="$2"
            shift; shift
            ;;
        -H|--hostname)
            run_command "lime-hn" "system.hostname=${2}"
            shift; shift
            ;;
        -a|--ap-key)
            run_command "lime-ak" "wifi.ap_key=${2}"
            shift; shift
            ;;
        -d|--mesh-id)
            run_command "lime-mi" "wifi.ieee80211s_mesh_id=${2}"
            shift; shift
            ;;
        -m|--mesh-key)
            run_command "lime-mk" "wifi.ieee80211s_key=${2}"
            shift; shift
            ;;
        -f|--firstboot)
            read -p "confirm network reset [y/N]" -n 1 -r
            if [[ $REPLY == "Y" || $REPLY == "y" ]]
            then
                echo "send reset command to mesh network"
                run_command "cmd-rst" "firstboot -y"
            else
                echo "reset canceled"
            fi
            shift
            ;;
        -r|--raw)
            run_command "cmd-raw" "${2}"
            shift; shift
            ;;
        -s|--set-ssh)
            run_command "cmd-ssh" "echo ${2} > /etc/dropbear/authorized_keys"
            shift; shift
            ;;
        -I|--initial-distribution)
            initial_config_distribution "${2}"
            shift
            ;;
        --me)
            json_load "$(cat /var/run/bmx7/json/status)"
            json_select status
            json_get_var bmx7_nodeid nodeId
            echo "$bmx7_nodeid"
            shift
            ;;
        *)
            break
        ;;
    esac
done
