#!/bin/sh

. /usr/share/libubox/jshn.sh

# loads trusted bmx7 ids from lime(-defaults)
trusted_ids=$(uci -q get lime-defaults.meshrc.trusted)
[[ -z "$trusted_ids" ]]  && {
    trusted_ids=$(uci -q get lime.meshrc.trusted)
    [[ -z "$trusted_ids" ]] && {
        uci -q set lime.meshrc="lime"
        uci -q add_list lime.meshrc.trusted=""
        echo "please add section trusted_nodes in /etc/config/lime"
        exit 1
    }
}

# parses the own shortid and stores it in uci format
bmx7_shortid="$(uci -q get lime.system.bmx7_shortid)"
bmx7_nodeid="$(uci -q get lime.system.bmx7_nodeid)"
[[ -z "$bmx7_shortid" || -z "$bmx7_nodeid" ]] && {
    json_load "$(cat /var/run/bmx7/json/status)"
    json_select status
    json_get_var bmx7_shortid shortId
    json_get_var bmx7_nodeid nodeId
    uci -q set lime.system.bmx7_shortid="$bmx7_shortid"
    uci -q set lime.system.bmx7_nodeid="$bmx7_nodeid"
    uci commit lime
}

# return all node ids currently active in the network
active_node_ids() {
    echo "$(ls -1 /var/run/bmx7/json/originators/)"
}

# return all node ids which acked the comment $1
acked_command() {
    # own ack isn't in rcvdSms folder
    echo "$bmx7_nodeid"
    # trusted nodes may don't run the client and so no acks
    echo "$trusted_ids"
    # all acks from other nodes running the client
    echo "$(ls /var/run/bmx7/sms/rcvdSms/*:${1}-ack | cut -d '/' -f 7 | \
            cut -d ':' -f 1)"
}

# sync cmd $1-ack to the cloud and wait until all other nodes acked it
wait_cloud_synced() {
    logger meshrc "wait for cloud sync ${1}"
    # create & share acked file
    touch "/var/run/bmx7/sms/sendSms/${1}-ack"
    /usr/sbin/bmx7 -c syncSms="${1}-ack"

    # give it some time
    sleep 5

    # wait until cloud is synced
    while [[ "$(active_node_ids | sort)" != "$(acked_command $1 | sort)" ]]; do
        sleep 5
    done
    logger meshrc "synced cloud for ${1}"

    # stop distribution of the ack
    rm "/var/run/bmx7/sms/sendSms/${1}-ack"
}

while true; do
    for trusted_id in $trusted_ids; do
        [[ -z "$trusted_id" ]] && return
        for config_path in ls /var/run/bmx7/sms/rcvdSms/${trusted_id}*; do
            config_file="$(basename $config_path | cut -d ':' -f 2)"
            logger meshrc "received config of trusted node ${config_file}"
            case $config_file in
                lime-*)
                    logger meshrc "run lime spcific command $config_file"
                    [ ! "$config_file" = *"_$bmx7_shortid" ] && \
                        wait_cloud_synced "$config_file"
                    uci -q set lime."$(cat $config_file)"
                    uci commit lime
                    lime-config
                    lime-apply
                    ;;
                cmd-*)
                    logger meshrc "run generic command $config_file"
                    [ ! "$config_file" = *"_$bmx7_shortid" ] && \
                        wait_cloud_synced "$config_file"
                    $(cat "$config_file")
                    ;;
            esac
        done
    done

    # wait for newly received sms
    inotifywait -e delete -e create -e modify /var/run/bmx7/sms/rcvdSms
done
